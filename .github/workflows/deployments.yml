name: Deployments

on:
  workflow_call:
    secrets:
      HOST: { required: true }
      USER: { required: true }
      WORKING_PATH: { required: true }
      DATABASE_USER: { required: true }
      DATABASE_PASSWORD: { required: true }
      DATABASE_HOST: { required: true }
      DATABASE_PORT: { required: true }
      SSH_PRIVATE_KEY: { required: true }
      SSH_KNOWN_HOSTS: { required: true }

permissions:
  actions: write

jobs:
  deploy:
    if: ${{ github.event_name == 'pull_request' && github.event.action == 'opened' || github.event.action == 'reopened' || github.event.action == 'synchronize' }}
    runs-on: ubuntu-latest
    environment:
      name: Deployment ${{ github.head_ref }}
      url: ${{ steps.print-deployment-link.outputs.link }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: yarn
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh/
          mkdir -p ./packages/deployment/dist/
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ./deploy.key
          sudo chmod 600 ./deploy.key
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ./packages/deployment/dist/deploy.key
          sudo chmod 600 ./packages/deployment/dist/deploy.key
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" > ~/.ssh/known_hosts
        shell: bash
      - name: Generate deployment config
        run: |
          yarn deployment pre-pm2 \
            --branch-ref "origin/${{ github.head_ref }}" \
            --domain "${{ vars.DOMAIN }}" \
            --host "${{ secrets.HOST }}" \
            --repository "${{ github.server_url }}/${{ github.repository }}/" \
            --working-path "${{ secrets.WORKING_PATH }}" \
            --user "${{ secrets.USER }}" \
            --database-user "${{ secrets.DATABASE_USER }}" \
            --database-password "${{ secrets.DATABASE_PASSWORD }}" \
            --database-host "${{ secrets.DATABASE_HOST }}" \
            --database-port "${{ secrets.DATABASE_PORT }}"
      - if: ${{ github.event_name == 'pull_request' && github.event.action == 'opened' || github.event.action == 'reopened' }}
        name: "Setup deployment on the remote server"
        run: yarn pm2 deploy ./packages/deployment/dist/deployment.json branch setup
      - name: "Deploy branch to the remote server"
        run: yarn pm2 deploy ./packages/deployment/dist/deployment.json branch
      - id: print-deployment-link
        name: Print deployment link
        run: echo "link=$(yarn -s deployment print-link --branch-ref "origin/${{ github.head_ref }}" --domain "${{ vars.DOMAIN }}")" >> $GITHUB_OUTPUT

  # This action must remove environment. URL of this environment will take from util
  remove:
    if: ${{ github.event_name == 'pull_request' && github.event.action == 'closed' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: yarn
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh/
          mkdir -p ./packages/deployment/dist/
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ./deploy.key
          sudo chmod 600 ./deploy.key
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ./packages/deployment/dist/deploy.key
          sudo chmod 600 ./packages/deployment/dist/deploy.key
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" > ~/.ssh/known_hosts
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Generate deployment removing config
        run: |
          yarn deployment remove \
            --branch-ref "origin/${{ github.head_ref }}" \
            --host ${{ secrets.HOST }} \
            --repository "${{ github.server_url }}/${{ github.repository }}/" \
            --working-path "${{ secrets.WORKING_PATH }}" \
            --user "${{ secrets.USER }}"
      - name: "Remove branch' deployment on the remote server"
        run: yarn pm2 deploy ./packages/deployment/dist/remove-deployment.json remove
